import radarsimpy
from radarsimpy import Radar, Transmitter, Receiver
import radarsimpy.processing as proc
from radarsimpy.simulator import sim_radar

import numpy as np
from scipy import signal, linalg, fft
import plotly.graph_objs as go
from IPython.display import Image
import matplotlib.pyplot as plt

from tqdm import tqdm

# print("`RadarSimPy` used in this example is version: " + str(radarsimpy.__version__))

c = 3e8
f_c = 5.8e9 # center frequency
wavelength = c / f_c

bw = 20.0e6 # bandwidth
t_chirp = 4.6e-6 # chirp time
prp=5e-6 # Pulse Repetition Period
pulses = 128

fs = 46e6 # 50e6 # IF fs


# Define steering range in degree
min_angle = -60
max_angle = 60
step = 5
angles = np.arange(min_angle, max_angle + step, step)

# Wavenumber k
k = 2 * np.pi / wavelength
d = wavelength / 2  # element spacing


r_max = (c * t_chirp) / 2 # calculate the maximum range
delta_R = c / (2 * bw)  # Calculate range resolution (meters / bin)
doppler_max = wavelength / (4 * prp) #((wavelength * (1 / (2 * prp))) / 2)
delta_velocity = wavelength / (2 * pulses * prp)

# print(f"max range: {round(r_max, 2)} m; range resolution: {round(delta_R, 3)} m")
print(f"max velocity {round(doppler_max, 2)} m/s; velocity resolution: {round(delta_velocity, 3)} m/s")
print(f"tx time: {prp * pulses}s; sampls/chirp: {round(t_chirp * fs, 2)}")


# Elevation angles (deg) for az = 0:
elevation_deg = [-179.99999999999983, -176.9999999999998, -173.9999999999998, -170.9999999999998, -167.9999999999998, -164.9999999999998, -161.99999999999977, -158.99999999999977, -155.99999999999977, -152.99999999999977, -149.99999999999974, -146.99999999999974, -143.99999999999974, -140.99999999999972, -137.99999999999974, -134.99999999999972, -132.00000000000028, -129.00000000000028, -126.00000000000028, -122.9999999999997, -119.99999999999969, -117.00000000000026, -114.00000000000026, -111.00000000000024, -108.00000000000024, -105.00000000000023, -102.00000000000021, -99.00000000000021, -96.00000000000021, -93.00000000000021, -90.0000000000002, -87.00000000000018, -84.00000000000018, -81.00000000000018, -78.00000000000017, -75.00000000000017, -72.00000000000016, -69.00000000000014, -66.00000000000014, -63.00000000000014, -60.000000000000135, -57.00000000000001, -54.00000000000001, -50.99999999999999, -47.99999999999999, -44.99999999999998, -41.99999999999998, -39.00000000000003, -36.00000000000002, -33.000000000000014, -30.00000000000001, -27.000000000000004, -23.999999999999996, -21.000000000000046, -17.999999999999982, -14.999999999999977, -12.000000000000027, -9.00000000000002, -5.999999999999956, -3.000000000000018, 0.0, 3.0000000000000004, 6.000000000000013, 9.00000000000002, 12.000000000000027, 14.999999999999977, 17.999999999999982, 20.99999999999999, 23.999999999999996, 27.000000000000004, 30.00000000000001, 33.000000000000014, 36.00000000000002, 38.99999999999997, 41.99999999999998, 44.99999999999998, 47.99999999999999, 50.99999999999999, 54.00000000000001, 57.00000000000001, 60.000000000000135, 63.00000000000014, 66.00000000000014, 69.00000000000014, 72.00000000000016, 75.00000000000017, 78.00000000000017, 81.00000000000018, 84.00000000000018, 87.00000000000018, 90.0000000000002, 93.00000000000021, 96.00000000000021, 99.00000000000021, 102.00000000000021, 105.00000000000023, 108.00000000000024, 111.00000000000024, 114.00000000000026, 117.00000000000026, 120.00000000000027, 123.00000000000026, 126.00000000000028, 128.99999999999972, 132.00000000000028, 134.99999999999972, 137.99999999999974, 140.99999999999972, 143.99999999999974, 146.99999999999974, 149.99999999999974, 152.99999999999977, 155.99999999999977, 158.99999999999977, 161.99999999999977, 164.9999999999998, 167.9999999999998, 170.9999999999998, 173.9999999999998, 176.9999999999998, 179.99999999999983]
# Elevation gains (dB) for az = 0:
elevation_db = [-11.0564177600522, -18.44092479568, -13.2754494913863, -9.42706146088005, -8.78128218054954, -9.78701034327949, -11.1754087190653, -12.6075364238689, -14.4617347329831, -14.2080261810022, -11.2851830097106, -9.03177783300341, -7.88004696347143, -7.31982184724696, -6.87681218527422, -6.4917480568463, -6.44898108042292, -6.97769825459434, -8.03309596465273, -9.19390141042322, -9.7786993837361, -9.63868311562885, -9.40967055468429, -9.61964565038386, -10.1952948336693, -10.4701683681473, -10.0009761477984, -9.24559101804735, -8.6182650473578, -7.9554737223407, -7.00802260344282, -6.01086082736654, -5.33082650823109, -4.94993149551738, -4.4651515435252, -3.55472681051069, -2.45441312894883, -1.59168421871327, -1.05291348551257, -0.549819238882187, 0.21645231434915, 1.15304899868252, 1.93774815667926, 2.42299333663577, 2.76426218595645, 3.22811650551476, 3.81922893438463, 4.26849410691482, 4.3807230582588, 4.22241526805317, 4.06682791250217, 4.11697993775937, 4.26787779777215, 4.28981355793001, 4.11751447357501, 3.90438519229274, 3.85083391461148, 3.96373336489279, 4.08094418062272, 4.09690408162928, 4.05414675788782, 4.0610259762584, 4.14609573455012, 4.21971985444069, 4.19406049491881, 4.07639729046669, 3.93090914402992, 3.79610635847919, 3.67278944252736, 3.58403326859075, 3.60643068648742, 3.79601138774966, 4.08404345654506, 4.30160411325312, 4.31103918114765, 4.09988059353225, 3.77665819976005, 3.4725554159015, 3.2164078279714, 2.91126337044944, 2.43733233213087, 1.76974629549319, 1.01028671026886, 0.295013287412604, -0.356463579522812, -1.0712636983911, -1.97583930525567, -3.02923999671737, -4.01002953418016, -4.72550004273476, -5.24308720741452, -5.83127890408519, -6.6875062455698, -7.73578251828901, -8.67026846647646, -9.25644740330945, -9.51890843254305, -9.56541955186098, -9.39337785985414, -8.94439728560103, -8.26641940266377, -7.56001303612014, -7.07038199973129, -6.92382347407657, -7.09171313845376, -7.43315802716914, -7.67019747319611, -7.62611802994532, -7.62158674101725, -8.03224494765338, -8.58236900545243, -8.44539009232401, -7.51446786240429, -6.52955855577762, -6.0418108032645, -6.20525408833906, -6.64329820991101, -6.61622246590174, -6.42927959134159, -7.42110941667632, -11.0564177600522]
# Azimuth angles (deg) for ez = 90:
zimuth_deg = [-179.99999999999983, -176.9999999999998, -173.9999999999998, -170.9999999999998, -167.9999999999998, -164.9999999999998, -161.99999999999977, -158.99999999999977, -155.99999999999977, -152.99999999999977, -149.99999999999974, -146.99999999999974, -143.99999999999974, -140.99999999999972, -137.99999999999974, -134.99999999999972, -132.00000000000028, -129.00000000000028, -126.00000000000028, -122.9999999999997, -119.99999999999969, -117.00000000000026, -114.00000000000026, -111.00000000000024, -108.00000000000024, -105.00000000000023, -102.00000000000021, -99.00000000000021, -96.00000000000021, -93.00000000000021, -90.0000000000002, -87.00000000000018, -84.00000000000018, -81.00000000000018, -78.00000000000017, -75.00000000000017, -72.00000000000016, -69.00000000000014, -66.00000000000014, -63.00000000000014, -60.000000000000135, -57.00000000000001, -54.00000000000001, -50.99999999999999, -47.99999999999999, -44.99999999999998, -41.99999999999998, -39.00000000000003, -36.00000000000002, -33.000000000000014, -30.00000000000001, -27.000000000000004, -23.999999999999996, -21.000000000000046, -17.999999999999982, -14.999999999999977, -12.000000000000027, -9.00000000000002, -5.999999999999956, -3.000000000000018, 0.0, 3.0000000000000004, 6.000000000000013, 9.00000000000002, 12.000000000000027, 14.999999999999977, 17.999999999999982, 20.99999999999999, 23.999999999999996, 27.000000000000004, 30.00000000000001, 33.000000000000014, 36.00000000000002, 38.99999999999997, 41.99999999999998, 44.99999999999998, 47.99999999999999, 50.99999999999999, 54.00000000000001, 57.00000000000001, 60.000000000000135, 63.00000000000014, 66.00000000000014, 69.00000000000014, 72.00000000000016, 75.00000000000017, 78.00000000000017, 81.00000000000018, 84.00000000000018, 87.00000000000018, 90.0000000000002, 93.00000000000021, 96.00000000000021, 99.00000000000021, 102.00000000000021, 105.00000000000023, 108.00000000000024, 111.00000000000024, 114.00000000000026, 117.00000000000026, 120.00000000000027, 123.00000000000026, 126.00000000000028, 128.99999999999972, 132.00000000000028, 134.99999999999972, 137.99999999999974, 140.99999999999972, 143.99999999999974, 146.99999999999974, 149.99999999999974, 152.99999999999977, 155.99999999999977, 158.99999999999977, 161.99999999999977, 164.9999999999998, 167.9999999999998, 170.9999999999998, 173.9999999999998, 176.9999999999998, 179.99999999999983]
# Azimuth gains (dB) for ez = 90:
azimuth_db = [-11.0564177600522, -14.3582274127641, -14.8090841836149, -12.5856332703635, -11.2617178077471, -10.3611201949056, -9.57904604916796, -9.44042450447368, -9.85723565120897, -9.72217109132564, -8.54472935851324, -7.5419828345631, -7.58307813618647, -8.57359914777802, -9.68967742250014, -10.2458840258047, -10.5468923791389, -11.1433100062133, -12.3167169389999, -13.7124434215614, -14.2121408667404, -13.4226422674142, -12.3274617435703, -11.809706047437, -11.777769783984, -11.4266113068985, -10.6524289711561, -10.1499161898088, -10.2189299246871, -10.2371212419414, -9.21031139248254, -7.75355131108342, -6.89766771553003, -6.73053118971585, -6.52584919882571, -5.44876956039487, -4.03023110380842, -3.16079200002872, -2.87952186550199, -2.56056599528831, -1.62005704466896, -0.314889351651572, 0.714003308847323, 1.2110677838731, 1.39873346128761, 1.7051066082906, 2.26578018150085, 2.79544397167971, 3.01483965100272, 2.95054860217389, 2.91067792181659, 3.15446043595477, 3.55596391797295, 3.80483943741098, 3.79278518148527, 3.71469827766218, 3.85654872149248, 4.2189463880206, 4.49517304023901, 4.43136115311838, 4.05414675788782, 3.64653712888418, 3.50894273510127, 3.63822069374685, 3.72808594502903, 3.5241925473243, 3.0806618944733, 2.715644609771, 2.68115052215305, 2.84170216442266, 2.83304043803097, 2.46816782032632, 1.92456224308065, 1.58662055962899, 1.54590613058032, 1.42443750577998, 0.855634932543951, -0.111925230367315, -0.972731739873837, -1.32174462437621, -1.50780628468134, -2.12939392640989, -3.340926604368, -4.62658222413236, -5.28582317583601, -5.56130595790106, -6.17123891621654, -7.31481374166198, -8.39471027761722, -8.76161820997963, -9.00736054416996, -9.8640154143325, -11.225831113635, -12.0635605016782, -11.7842441258633, -11.6147969859098, -12.3450252112286, -13.5383169909029, -14.2200658581392, -14.1954943418359, -14.1507027249158, -14.4117158181627, -14.6712203567062, -14.7255439001195, -14.9688392297498, -16.2000153107811, -18.2886018785075, -18.1087489524252, -16.9581752090022, -16.2152387443459, -13.6116782411785, -11.2586903950989, -10.3430913667302, -10.0425570551763, -9.73592081398832, -9.31098980925331, -8.4032502017546, -7.5235100869829, -7.53618936184973, -8.68843020508115, -11.0564177600522]


N_tx = 4
N_rx = 4

tx_channels = []
if (N_tx == 1):
    tx_channels.append(dict(location=(0, 0, 0)))
else:
    for idx in range(0, N_tx):
        tx_channels.append(dict(
            location=(0, d * idx - (N_tx - 1) * wavelength / 4, 0),
            azimuth_angle=zimuth_deg,
            azimuth_pattern=azimuth_db,
            elevation_angle=elevation_deg,
            elevation_pattern=elevation_db
        ))


rx_channels = []
for idx in range(0, N_rx):
    rx_channels.append(
        dict(
            location=(0, d * idx - (N_rx - 1) * wavelength / 4, 0),
            azimuth_angle=zimuth_deg,
            azimuth_pattern=azimuth_db,
            elevation_angle=elevation_deg,
            elevation_pattern=elevation_db
        )
    )

tx = Transmitter(
    f=[f_c - (bw/2), f_c + (bw/2)],
    t=[0, t_chirp],
    tx_power=40, # 40
    prp=prp,
    pulses=pulses,
    channels=tx_channels
)

rx = Receiver(
    fs=fs,
    noise_figure=0, # 8
    rf_gain=20,
    load_resistor=50,
    baseband_gain=30,
    channels=rx_channels
)

radar = Radar(transmitter=tx, receiver=rx)

fig = go.Figure()
fig.add_trace(
    go.Scatter(
        x=radar.radar_prop["transmitter"].txchannel_prop["locations"][:, 1]
        / wavelength,
        y=radar.radar_prop["transmitter"].txchannel_prop["locations"][:, 2]
        / wavelength,
        mode="markers",
        name="Transmitter",
        opacity=0.7,
        marker=dict(size=10),
    )
)

fig.add_trace(
    go.Scatter(
        x=radar.radar_prop["receiver"].rxchannel_prop["locations"][:, 1] / wavelength,
        y=radar.radar_prop["receiver"].rxchannel_prop["locations"][:, 2] / wavelength,
        mode="markers",
        opacity=1,
        name="Receiver",
    )
)

fig.update_layout(
    title="Array configuration",
    xaxis=dict(title="y (λ)"),
    yaxis=dict(title="z (λ)", scaleanchor="x", scaleratio=1),
)

# uncomment this to display interactive plot
# fig.show()

# display static image to reduce size on radarsimx.com
# img_bytes = fig.to_image(format="jpg", scale=2)
# display(Image(img_bytes))

rcs = 10


# velocity resolution
target_1 = dict(
    location=(
        0,
        500,
        0,
    ),
    speed=(0, 0.5, 0),
    rcs=rcs,
    phase=0,
)

# velocity resolution
target_2 = dict(
    location=(
        0,
        500,
        0,
    ),
    speed=(0, 0.55, 0),
    rcs=rcs,
    phase=0,
)

# max velocity towards radar
target_3 = dict(
    location=(
        0,
        500,
        0,
    ),
    speed=(0, -15000.25, 0),
    rcs=rcs,
    phase=0,
)


# range
target_4 = dict(
    location=(
        #40 * np.cos(np.radians(true_theta[2])),
        #40 * np.sin(np.radians(true_theta[2])),
        0,
        1000,
        0,
    ),
    speed=(0, 0, 0),
    rcs=rcs,
    phase=0,
)

# angle max
target_5 = dict(
    location=(
        500 * np.cos(np.radians(80)),
        500 * np.sin(np.radians(80)),
        0,
    ),
    speed=(0, 0, 0),
    rcs=rcs,
    phase=0,
)

# angle max
target_6 = dict(
    location=(
        500 * np.cos(np.radians(-80)),
        500 * np.sin(np.radians(-80)),
        0,
    ),
    speed=(0, 0, 0),
    rcs=rcs,
    phase=0,
)

# angle res
target_7 = dict(
    location=(
        500 * np.cos(np.radians(35)),
        500 * np.sin(np.radians(35)),
        0,
    ),
    speed=(0, 0, 0),
    rcs=rcs,
    phase=0,
)

# angle res
target_8 = dict(
    location=(
        500 * np.cos(np.radians(40)),
        500 * np.sin(np.radians(40)),
        0,
    ),
    speed=(0, 0, 0),
    rcs=rcs,
    phase=0,
)


# targets = [target_1]
targets = [target_1, target_2, target_3, target_4, target_5, target_6, target_7, target_8]


baseband_stack = []


for angle in tqdm(angles):

    # Compute phase offsets per element
    phase_offsets = [idx * k * d * np.sin(np.radians(angle)) for idx in range(N_tx)]

    # Apply to radar TX antenna array
    for idx in range(N_tx):
        tx_channels[idx]["pulse_phs"] = np.repeat(phase_offsets[idx], pulses)

    # Simulate for this steering
    data = sim_radar(radar, targets)
    timestamp = data["timestamp"]
    baseband = data["baseband"] #+ data["noise"]

    baseband_stack.append(baseband)

baseband_stack = np.stack(baseband_stack, axis=0) 

# Save data to file
with open('simData/radarBasebandBeamSteer.npy', 'wb') as f:
    np.save(f, baseband_stack)
